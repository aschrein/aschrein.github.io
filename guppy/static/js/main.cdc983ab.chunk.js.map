{"version":3,"sources":["app.jsx","Readme.md","asm/raymarcher.s","asm/branch_5.s","asm/branch_6.s","asm/branch_1.s","asm/branch_2.s","asm/branch_3.s","asm/branch_4.s","index.jsx"],"names":["_wasm","__webpack_require__","e","then","bind","TextEditorComponent","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","assertThisInitialized","Execute","PauseResume","onResize","setText","setClocks","state","clocks","glContainer","on","globals","newValue","text","wasm","run","setState","refs","editor","setValue","resetGPU","config","dispatchConfig","i","r_images","length","guppy_put_image","guppy_dispatch","console","log","react_default","a","createElement","className","style","margin","onClick","background","border","setupRaymarching","setupBranch_1","setupBranch_2","setupBranch_3","setupBranch_4","setupBranch_5","setupBranch_6","lib_default","value","ref","mode","theme","name","editorProps","$blockScrolling","autoScrollEditorIntoView","wrapEnabled","height","width","React","Component","ParametersComponent","_this2","onChangeDispatch","updateParameters","key","parent","data","gpuConfig","gpu_config","root","dispatch_config","color","build","ReadmeComponent","react_markdown_default","source","BindingsComponent","_this3","updateMemory","_this4","ctx","canvas","getContext","promiseOnload","img","Promise","resolve","onload","status","onerror","t0","t1","t4","all","pushImg","drawImage","p","getImageData","r","g","b","toString","rgbToHex","slice","base64","toDataURL","push","pushCheckerboard","size","y","x","fillStyle","Math","floor","fillRect","image","Image","src","checkerboard1","checkerboard64","t2","t3","drawText","font","textAlign","textBaseline","fillText","guppy_get_image","display","GraphsComponent","_this5","neededWidth","neededHeight","updateCanvas","scheduleDraw","remapColors","colorMap","getRandomColor","random","draw","lastClock","window","removeEventListener","waves_per_cu","wave_id","_this6","wave_size","cu_count","valu_count","active_mask_history","putTag","color_sem","0","1","2","3","4","color_code","sampler_max_metrics","Array","fill","sampler_cache_history","row","j","max","history","exec_mask_offset","cu_id","lane_id","alu_active_history","valu_id","hit","miss","evict","welcomeMessage","l2_metric_history","marginLeft","marginRight","GoldenLayoutWrapper","_this7","group_size","groups_count","cycles_per_iter","update graph","DRAM_latency","DRAM_bandwidth","L1_size","L1_latency","L2_size","L2_latency","sampler_cache_size","sampler_latency","VGPRF_per_pe","CU_count","ALU_per_cu","fd_per_cu","ALU_pipe_len","guppy_clock","guppy_get_active_mask","guppy_get_valu_active","guppy_get_sampler_cache_metrics","guppy_get_gpu_metric","_this8","intervalId","setInterval","timer","content","type","component","title","layout","GoldenLayout","guppy_create_gpu_state","JSON","stringify","guppy_init_framebuffer","updateSize","registerComponent","init","ReactDOM","addEventListener","_this9","input","render","app","document","getElementById"],"mappings":"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","file":"static/js/main.cdc983ab.chunk.js","sourcesContent":["import GoldenLayout from 'golden-layout';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Markdown from 'react-markdown';\nimport './css/main.css';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/assembly_x86';\n// Import a Theme (okadia, github, xcode etc)\nimport 'brace/theme/tomorrow_night_eighties';\nimport { JSONEditor } from 'react-json-editor-viewer';\nimport raymarcher_s from './asm/raymarcher.s';\nimport branch_1_s from './asm/branch_1.s';\nimport branch_2_s from './asm/branch_2.s';\nimport branch_3_s from './asm/branch_3.s';\nimport branch_4_s from './asm/branch_4.s';\nimport branch_5_s from './asm/branch_5.s';\nimport branch_6_s from './asm/branch_6.s';\nimport readme_md from './Readme.md';\n\nfunction onChange(newValue) {\n    console.log('change', newValue);\n}\n\nconst _wasm = import(\"guppy_rust\");\n\nclass TextEditorComponent extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n\n        this.onChange = this.onChange.bind(this);\n        this.Execute = this.Execute.bind(this);\n        this.PauseResume = this.PauseResume.bind(this);\n        this.onResize = this.onResize.bind(this);\n        this.setText = this.setText.bind(this);\n        this.setClocks = this.setClocks.bind(this);\n        this.state = { clocks: 0 };\n\n    }\n\n    componentDidMount() {\n        // this.refs.editor.setValue(\n        //     \"ret\"\n        // );\n        this.props.glContainer.on('resize', this.onResize);\n        this.props.globals().setText = this.setText;\n        this.props.globals().setClocks = this.setClocks;\n    }\n\n    onChange(newValue) {\n        this.text = newValue;\n    }\n\n    onResize() {\n        // this.refs.editor.resize();\n    }\n\n    PauseResume() {\n        if (this.props.globals().wasm) {\n            this.props.globals().run = !this.props.globals().run;\n        }\n    }\n    setClocks(clocks) {\n        this.setState({ clocks: clocks });\n    }\n    setText(text) {\n        this.refs.editor.editor.setValue(text);\n    }\n\n    Execute() {\n        let globals = this.props.globals();\n        if (this.props.globals().wasm) {\n            this.props.globals().resetGPU();\n            let config = this.props.globals().dispatchConfig;\n            for (var i = 0; i < globals.r_images.length; i++) {\n                globals.wasm.guppy_put_image(globals.r_images[i]);\n            }\n            this.props.globals().wasm.guppy_dispatch(\n                this.text,\n                config[\"group_size\"],\n                config[\"groups_count\"]\n            );\n\n            this.props.globals().run = true;\n        } else {\n            console.log(\"[WARNING] wasm in null\");\n        }\n    }\n    render() {\n\n        return (\n            <div className=\"ace_editor_container\">\n                <button style={{ margin: 10 }} onClick={this.Execute}>\n                    Execute\n                </button>\n                <button style={{ margin: 10 }} onClick={this.PauseResume}>\n                    Pause/Resume Clocks:{this.state.clocks}\n                </button>\n                <div style={{ background: \"#cccccc\", margin: 10 }}>\n                    <p style={{ margin: 5 }}>Setup example</p>\n                    <button style={{ border: 1 }} onClick={this.props.globals().setupRaymarching}>\n                        RayMarching\n                    </button>\n                    <button style={{ border: 1 }} onClick={this.props.globals().setupBranch_1}>\n                        branch_1\n                    </button>\n                    <button style={{ border: 1 }} onClick={this.props.globals().setupBranch_2}>\n                        branch_2\n                    </button>\n                    <button style={{ border: 1 }} onClick={this.props.globals().setupBranch_3}>\n                        branch_3\n                    </button>\n                    <button style={{ border: 1 }} onClick={this.props.globals().setupBranch_4}>\n                        branch_4\n                    </button>\n                    <button style={{ border: 1 }} onClick={this.props.globals().setupBranch_5}>\n                        branch_5\n                    </button>\n                    <button style={{ border: 1 }} onClick={this.props.globals().setupBranch_6}>\n                        branch_6\n                    </button>\n                </div>\n                <AceEditor\n                    value={this.text}\n                    ref=\"editor\"\n                    mode=\"assembly_x86\"\n                    theme=\"tomorrow_night_eighties\"\n                    onChange={this.onChange}\n                    name=\"UNIQUE_ID_OF_DIV\"\n                    editorProps={{\n                        $blockScrolling: true\n                    }}\n                    autoScrollEditorIntoView={false}\n                    wrapEnabled={false}\n                    height=\"700px\"\n                    width=\"512px\"\n                />\n            </div>\n        );\n    }\n}\n\nclass ParametersComponent extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n\n        this.onChange = this.onChange.bind(this);\n        this.onChangeDispatch = this.onChangeDispatch.bind(this);\n        this.updateParameters = this.updateParameters.bind(this);\n    }\n\n    componentDidMount() {\n        this.props.globals().updateParameters = this.updateParameters;\n    }\n\n    onChange(key, value, parent, data) {\n        console.log(\"onchange\", key, value);\n        this.props.globals().gpuConfig[key] = value;\n\n\n    }\n\n    onChangeDispatch(key, value, parent, data) {\n        console.log(\"onChangeDispatch\", key, value);\n        this.props.globals().dispatchConfig[key] = value;\n\n    }\n\n    updateParameters() {\n        // console.log(this.refs.gpu_config.state);\n        this.refs.gpu_config.setState({ data: { root: this.props.globals().gpuConfig } });\n        this.refs.dispatch_config.setState({ data: { root: this.props.globals().dispatchConfig } });\n        // this.forceUpdate();\n        // this.refs.gpu_config.setData(this.props.globals().gpuConfig);\n        // this.refs.dispatch_config.setData(this.props.globals().dispatchConfig);\n    }\n\n    render() {\n        // console.log(this.props.globals().gpuConfig);\n        return (\n            <div>\n                <p style={{ color: \"white\", margin: 10 }}>GPU Config</p>\n                <JSONEditor\n                    ref=\"gpu_config\"\n                    data={\n                        this.props.globals().gpuConfig\n                    }\n                    onChange={this.onChange}\n                />\n                <p style={{ color: \"white\", margin: 10 }}>Dispatch config</p>\n                <JSONEditor\n                    ref=\"dispatch_config\"\n                    data={\n                        this.props.globals().dispatchConfig\n                    }\n                    onChange={this.onChangeDispatch}\n                />\n\n            </div>\n        );\n    }\n}\n\nclass ReadmeComponent extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n    }\n\n    componentDidMount() {\n    }\n\n    render() {\n\n        return (\n            <Markdown className=\"Markdown\" source={readme_md} />\n        );\n    }\n}\n\nclass BindingsComponent extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n\n        this.updateMemory = this.updateMemory.bind(this);\n    }\n\n    componentDidMount() {\n        this.props.globals().updateMemory = this.updateMemory;\n        this.ctx = this.refs.canvas.getContext('2d');\n        let promiseOnload = (img) => {\n            return new Promise(resolve => {\n\n                img.onload = () => {\n                    // console.log(\"images Promise\");\n                    resolve({ img, status: 'ok' });\n                };\n                img.onerror = () => resolve({ img, status: 'error' });\n            });\n        }\n        let t0 = this.refs.t0;\n        let t1 = this.refs.t1;\n        let t4 = this.refs.t4;\n        Promise.all([promiseOnload(t0), promiseOnload(t1), promiseOnload(t4)]).then((value) => {\n            // console.log(\"images loaded\");\n            let pushImg = (img) => {\n                this.refs.canvas.width = img.width;\n                this.refs.canvas.height = img.height;\n                this.ctx.drawImage(img, 0, 0);\n                var p = this.ctx.getImageData(0, 0, 1, 1).data;\n                function rgbToHex(r, g, b) {\n                    if (r > 255 || g > 255 || b > 255)\n                        throw \"Invalid color component\";\n                    return ((r << 16) | (g << 8) | b).toString(16);\n                }\n                var hex = \"#\" + (\"000000\" + rgbToHex(p[0], p[1], p[2])).slice(-6);\n                let base64 = this.refs.canvas.toDataURL('image/png');\n                this.props.globals().r_images.push(base64);\n            }\n            pushImg(t0);\n            pushImg(t1);\n            let pushCheckerboard = (size) => {\n                this.refs.canvas.width = 256;\n                this.refs.canvas.height = 256;\n                for (var y = 0; y < 256; y++) {\n                    for (var x = 0; x < 256; x++) {\n                        this.ctx.fillStyle = \"#ffffff\";\n                        if (\n                            Math.floor(x / size) % 2 == 0 ^\n                            Math.floor(y / size) % 2 == 0\n                            ) {\n                                this.ctx.fillStyle = \"#000000\";\n                               \n                        }\n                        this.ctx.fillRect(x, y, 1, 1);\n                    }\n                }\n                let base64 = this.refs.canvas.toDataURL('image/png');\n                this.props.globals().r_images.push(base64);\n                let image = new Image();\n                image.src = base64;\n                return image;\n            };\n            this.checkerboard1 = pushCheckerboard(1);\n            this.checkerboard64 = pushCheckerboard(64);\n            pushImg(t4);\n            this.props.globals().resetGPU();\n            this.updateMemory();\n            // console.log(base64);\n        });\n\n    }\n\n    updateMemory() {\n        let ctx = this.refs.canvas.getContext('2d');\n        let image = new Image();\n        let canvas = this.refs.canvas;\n\n        let globals = this.props.globals();\n\n        let t0 = this.refs.t0;\n        let t1 = this.refs.t1;\n        let t2 = this.checkerboard1;\n        let t3 = this.checkerboard64;\n        let t4 = this.refs.t4;\n        image.onload = function () {\n            canvas.width = 512;\n            canvas.height = 1024 + 512;\n            // canvas.width = image.width;\n            // canvas.height += image.height;\n            ctx.fillStyle = \"#222222\";\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n            var x = 0;\n            var y = 5;\n            let drawText = (text) => {\n\n                ctx.font = \"14px Monaco, monospace\";\n                ctx.textAlign = \"start\";\n                ctx.textBaseline = \"top\";\n                ctx.fillStyle = \"#ffffff\";\n                ctx.fillText(text, x, y);\n                // y += 16;\n                x += text.length * 8;\n            };\n            drawText(\"s0 = Sampler {WrapMode::WRAP, SampleMode::BILINEAR}\");\n            y += 16;\n            x = 0;\n            drawText(\"t0 = \");\n            ctx.drawImage(t0, x, y);\n            y += t0.height + 10;\n            x = 0;\n\n            drawText(\"t1 = \");\n            ctx.drawImage(t1, x, y);\n            y += t1.height + 10;\n            x = 0;\n\n            drawText(\"t2 = \");\n            ctx.drawImage(t2, x, y);\n            y += t2.height + 10;\n            x = 0;\n\n            drawText(\"t3 = \");\n            ctx.drawImage(t3, x, y);\n            y += t3.height + 10;\n            x = 0;\n\n            drawText(\"t4 = \");\n            ctx.drawImage(t4, x, y);\n            y += t4.height + 10;\n            x = 0;\n\n            drawText(\"u0 = \");\n            ctx.drawImage(image, x, y);\n        };\n        let base64 = \"data:image/png;base64,\" + globals.wasm.guppy_get_image(0, false);\n        // console.log(base64);\n        image.src = base64;\n    }\n\n    render() {\n\n        return (\n            <div>\n                <canvas ref=\"canvas\" />\n                <img style={{ display: \"none\" }} ref=\"t0\" src=\"img/lenna.png\"></img>\n                <img style={{ display: \"none\" }} ref=\"t1\" src=\"img/rhino.png\"></img>\n                <img style={{ display: \"none\" }} ref=\"t4\" src=\"img/noise.png\"></img>\n            </div>\n        );\n    }\n}\n\nclass GraphsComponent extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.neededWidth = 4 * 1024;\n        this.neededHeight = 1024;\n        this.updateCanvas = this.updateCanvas.bind(this);\n        this.onResize = this.onResize.bind(this);\n        this.scheduleDraw = this.scheduleDraw.bind(this);\n        this.remapColors = this.remapColors.bind(this);\n        this.colorMap = {};\n        this.getRandomColor = () => {\n            var letters = '0123456789ABCDEF';\n            var color = '#';\n            for (var i = 0; i < 6; i++) {\n                color += letters[Math.floor(Math.random() * 16)];\n            }\n            return color;\n        };\n    }\n\n    componentDidMount() {\n        this.draw = true;\n        this.ctx = this.refs.canvas.getContext('2d');\n        this.canvas = this.refs.canvas;\n        this.lastClock = 0;\n        this.props.glContainer.on('resize', this.onResize);\n        this.globals = this.props.globals;\n        this.globals().updateCanvas = this.scheduleDraw;\n\n        this.updateCanvas();\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateCanvas)\n    }\n\n    onResize() {\n        this.updateCanvas();\n    }\n\n    scheduleDraw() {\n        this.draw = true;\n        this.updateCanvas();\n    }\n\n    remapColors() {\n\n        let waves_per_cu = this.globals().gpuConfig[\"waves_per_cu\"];\n        for (var wave_id = 0; wave_id < waves_per_cu; wave_id++) {\n\n            this.colorMap[wave_id] = this.getRandomColor();\n        }\n        this.draw = true;\n        this.updateCanvas();\n    }\n\n    updateCanvas() {\n        if (!this.draw) {\n            return;\n        }\n\n        let wave_size = this.globals().gpuConfig[\"wave_size\"];\n        let waves_per_cu = this.globals().gpuConfig[\"waves_per_cu\"];\n        let cu_count = this.globals().gpuConfig[\"CU_count\"];\n        let valu_count = this.globals().gpuConfig[\"ALU_per_cu\"];\n        let valu_pipe_len = this.globals().gpuConfig[\"ALU_pipe_len\"];\n        if (this.globals().active_mask_history) {\n            this.neededWidth = this.globals().active_mask_history.length + 512;\n            this.neededHeight = (wave_size + 4 + valu_count * 4 + 14) *\n                this.globals().gpuConfig[\"CU_count\"] * this.globals().gpuConfig[\"waves_per_cu\"] + 3 * 512;\n        }\n        this.draw = false;\n        this.canvas.width = this.neededWidth;\n        this.canvas.height = this.neededHeight;\n        this.ctx.fillStyle = \"#222222\";\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        var x = 0;\n        var y = 0;\n        let putTag = (text, x, y) => {\n            var canvas = this.ctx;\n            canvas.font = \"10px Monaco, monospace\";\n            canvas.textAlign = \"start\";\n            canvas.textBaseline = \"top\";\n            canvas.fillStyle = \"#ffffff\";\n            canvas.fillText(text, x, y);\n        };\n        let color_sem = {\n            0: \"inactive\",\n            1: \"active\",\n            2: \"disabled\",\n            3: \"stalled\",\n            4: \"idle\"\n        };\n        let color_code = {\n            0: \"black\",\n            1: \"white\",\n            2: \"grey\",\n            3: \"blue\",\n            4: \"red\"\n        };\n        {\n            //8:  4021\n            //32: 4226\n            //64: 4524\n\n            var canvas = this.ctx;\n            for (var i = 0; i < 5; i++) {\n                this.ctx.fillStyle = color_code[i];\n                this.ctx.fillRect(x, y, 16, 16);\n                canvas.font = \"24px Monaco, monospace\";\n                canvas.textAlign = \"start\";\n                canvas.textBaseline = \"top\";\n                canvas.fillStyle = \"#ffffff\";\n                canvas.fillText(color_sem[i], x + 16, y);\n                y += 22;\n            }\n        }\n        let HISTORY_OFFSET = 48;\n        if (this.globals().active_mask_history) {\n            var sampler_max_metrics = Array(cu_count).fill(0);\n            for (var i = 0; i < this.globals().sampler_cache_history.length; i++) {\n                let row = this.globals().sampler_cache_history[i];\n                for (var j = 0; j < cu_count; j++) {\n                    sampler_max_metrics[j] = Math.max(sampler_max_metrics[j], row[j * 3 + 0], row[j * 3 + 1], row[j * 3 + 2]);\n                }\n            }\n            let history = this.globals().active_mask_history;\n            if (history.length > 0) {\n                putTag(\"cycles:\" + this.globals().clocks, 0, y);\n                var canvas = this.ctx;\n                // console.log('updateCanvas', history[0].length);\n                x = HISTORY_OFFSET;\n                var exec_mask_offset = y + 16;\n                for (var i = 0; i < history.length; i++) {\n                    this.neededHeight = Math.max(this.neededHeight, y);\n                    y = exec_mask_offset + 4;\n                    for (var cu_id = 0; cu_id < cu_count; cu_id++) {\n                        y += 8;\n                        if (i == 0)\n                            putTag(\"core#\" + cu_id, 0, y);\n                        y += 12;\n                        for (var wave_id = 0; wave_id < waves_per_cu; wave_id++) {\n                            if (i == 0) {\n                                putTag(\"wave#\" + wave_id, 0, y + wave_size / 2);\n                                if (!(wave_id in this.colorMap))\n                                    this.colorMap[wave_id] = this.getRandomColor();\n                                this.ctx.fillStyle = this.colorMap[wave_id];\n                                this.ctx.fillRect(38, y + wave_size / 2, 4, 4);\n                            }\n\n                            for (var lane_id = 0; lane_id < wave_size; lane_id++) {\n                                let j = cu_id * waves_per_cu * wave_size + wave_id * wave_size + lane_id;\n                                if (j % wave_size == 0)\n                                    y += 4;\n                                this.ctx.fillStyle = color_code[history[i][j]];\n                                this.ctx.fillRect(x, y, 1, 1);\n                                y += 1;\n                            }\n                        }\n                        y += 4;\n                        {\n                            let history = this.globals().alu_active_history;\n                            for (var valu_id = 0; valu_id < valu_count; valu_id++) {\n                                if (i == 0)\n                                    putTag(\"ALU#\" + valu_id, 0, y);\n                                let j = cu_id * valu_count + valu_id;\n                                if (history[i][j] == -1) {\n                                    this.ctx.fillStyle = \"white\";\n                                } else if (history[i][j] == -2) {\n                                    this.ctx.fillStyle = \"black\";\n                                } else {\n                                    this.ctx.fillStyle = this.colorMap[history[i][j]];\n                                }\n                                this.ctx.fillRect(x, y, 1, 6);\n                                y += 14;\n                            }\n                        }\n                        y += 4;\n                        {\n                            let history = this.globals().sampler_cache_history;\n                            let hit = 10.0 * history[i][cu_id * 3 + 0] / sampler_max_metrics[cu_id];\n                            let miss = 10.0 * history[i][cu_id * 3 + 1] / sampler_max_metrics[cu_id];\n                            let evict = 10.0 * history[i][cu_id * 3 + 2] / sampler_max_metrics[cu_id];\n                            if (i == 0)\n                                putTag(\"sampler\", 0, y);\n                            for (var j = 10; j >= 0; j--) {\n                                var r = 0;\n                                var g = 0;\n                                var b = 0;\n                                if (j <= hit) {\n                                    r = 255.0;\n                                }\n                                if (j <= miss) {\n                                    g = 255.0;\n                                }\n                                if (j <= evict) {\n                                    b = 255.0;\n                                }\n                                this.ctx.fillStyle = 'rgb(' +\n                                    Math.floor(r) + ', ' +\n                                    Math.floor(g) + ', ' +\n                                    Math.floor(b) + ')';\n                                this.ctx.fillRect(x, y, 1, 1);\n                                y += 1;\n                            }\n                        }\n                    }\n                    x += 1;\n                    this.neededWidth = Math.max(this.neededWidth, x);\n                }\n            }\n        }\n        {\n            var canvas = this.ctx;\n            canvas.font = \"14px Monaco, monospace\";\n            var welcomeMessage = \"(r, g, b) = (hits, misses, evictions)\";\n            canvas.textAlign = \"start\";\n            canvas.textBaseline = \"top\";\n            canvas.fillStyle = \"#ffffff\";\n            canvas.fillText(welcomeMessage, 0, y + 16);\n            y += 16;\n        }\n        if (this.globals().l2_metric_history) {\n            let history = this.globals().l2_metric_history;\n            if (history.length > 0) {\n\n                var canvas = this.ctx;\n                canvas.font = \"14px Monaco, monospace\";\n                var welcomeMessage = \"L2$\";\n                canvas.textAlign = \"start\";\n                canvas.textBaseline = \"top\";\n                canvas.fillStyle = \"#ffffff\";\n                canvas.fillText(welcomeMessage, 0, y + 16);\n                var exec_mask_offset = y + 32;\n                x = HISTORY_OFFSET;\n                var max = 0;\n                for (var i = 0; i < history.length; i++) {\n                    max = Math.max(max, history[i][0], history[i][1], history[i][2]);\n                }\n                // console.log(max);\n                for (var i = 0; i < history.length; i++) {\n                    this.neededHeight = Math.max(this.neededHeight, y);\n                    y = exec_mask_offset;\n                    let hit = 100.0 * history[i][0] / max;\n                    let miss = 100.0 * history[i][1] / max;\n                    let evict = 100.0 * history[i][2] / max;\n                    for (var j = 100; j >= 0; j--) {\n                        var r = 0;\n                        var g = 0;\n                        var b = 0;\n                        if (j <= hit) {\n                            r = 255.0;\n                        }\n                        if (j <= miss) {\n                            g = 255.0;\n                        }\n                        if (j <= evict) {\n                            b = 255.0;\n                        }\n                        this.ctx.fillStyle = 'rgb(' +\n                            Math.floor(r) + ', ' +\n                            Math.floor(g) + ', ' +\n                            Math.floor(b) + ')';\n                        this.ctx.fillRect(x, y, 1, 1);\n                        y += 1;\n                    }\n                    x += 1;\n                }\n                this.neededWidth = Math.max(this.neededWidth, x);\n            }\n        }\n\n    }\n    render() {\n        return <div>\n            <div style={{ \"marginLeft\": 0, \"marginRight\": \"40%\" }}>\n                <button onClick={this.scheduleDraw}>\n                    Render History\n            </button>\n                <button onClick={this.remapColors}>\n                    Shuffle Colors\n            </button>\n            </div>\n            <canvas ref=\"canvas\" /> </div>;\n    }\n}\nclass GoldenLayoutWrapper extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.setupRaymarching = this.setupRaymarching.bind(this);\n        this.setupBranch_1 = this.setupBranch_1.bind(this);\n        this.setupBranch_2 = this.setupBranch_2.bind(this);\n        this.setupBranch_3 = this.setupBranch_3.bind(this);\n        this.setupBranch_4 = this.setupBranch_4.bind(this);\n        this.setupBranch_5 = this.setupBranch_5.bind(this);\n        this.setupBranch_6 = this.setupBranch_6.bind(this);\n    }\n    setupRaymarching() {\n        this.globals.dispatchConfig = {\n            \"group_size\": 32, \"groups_count\": 2048, \"cycles_per_iter\": 1, \"update graph\": false\n        };\n        this.globals.gpuConfig = {\n            \"DRAM_latency\": 32,\n            \"DRAM_bandwidth\": 12 * 64, \"L1_size\": 1024, \"L1_latency\": 4,\n            \"L2_size\": 1 * 1024, \"L2_latency\": 16, \"sampler_cache_size\": 1 * 1024,\n            \"sampler_latency\": 16, \"VGPRF_per_pe\": 128, \"wave_size\": 32,\n            \"CU_count\": 2, \"ALU_per_cu\": 2, \"waves_per_cu\": 4, \"fd_per_cu\": 2,\n            \"ALU_pipe_len\": 1\n        };\n        this.globals.setText(raymarcher_s);\n        this.globals.resetGPU();\n    }\n\n    setupBranch_5() {\n        this.globals.dispatchConfig = {\n            \"group_size\": 32, \"groups_count\": 2048, \"cycles_per_iter\": 1, \"update graph\": true\n        };\n        this.globals.gpuConfig = {\n            \"DRAM_latency\": 32,\n            \"DRAM_bandwidth\": 12 * 64, \"L1_size\": 1024, \"L1_latency\": 4,\n            \"L2_size\": 1 * 1024, \"L2_latency\": 16, \"sampler_cache_size\": 1 * 1024,\n            \"sampler_latency\": 16, \"VGPRF_per_pe\": 128, \"wave_size\": 32,\n            \"CU_count\": 4, \"ALU_per_cu\": 2, \"waves_per_cu\": 4, \"fd_per_cu\": 2,\n            \"ALU_pipe_len\": 1\n        };\n        this.globals.setText(branch_5_s);\n        this.globals.resetGPU();\n    }\n\n    setupBranch_6() {\n        this.globals.dispatchConfig = {\n            \"group_size\": 32, \"groups_count\": 2048, \"cycles_per_iter\": 1, \"update graph\": false\n        };\n        this.globals.gpuConfig = {\n            \"DRAM_latency\": 32,\n            \"DRAM_bandwidth\": 12 * 64, \"L1_size\": 1024, \"L1_latency\": 4,\n            \"L2_size\": 1 * 1024, \"L2_latency\": 16, \"sampler_cache_size\": 1 * 1024,\n            \"sampler_latency\": 16, \"VGPRF_per_pe\": 128, \"wave_size\": 32,\n            \"CU_count\": 64, \"ALU_per_cu\": 2, \"waves_per_cu\": 4, \"fd_per_cu\": 2,\n            \"ALU_pipe_len\": 1\n        };\n        this.globals.setText(branch_6_s);\n        this.globals.resetGPU();\n    }\n\n    setupBranch_1() {\n        this.globals.dispatchConfig = {\n            \"group_size\": 32, \"groups_count\": 1, \"cycles_per_iter\": 1, \"update graph\": true\n        };\n        this.globals.gpuConfig = {\n            \"DRAM_latency\": 32,\n            \"DRAM_bandwidth\": 12 * 64, \"L1_size\": 1024, \"L1_latency\": 4,\n            \"L2_size\": 1 * 1024, \"L2_latency\": 16, \"sampler_cache_size\": 1 * 1024,\n            \"sampler_latency\": 16, \"VGPRF_per_pe\": 128, \"wave_size\": 32,\n            \"CU_count\": 1, \"ALU_per_cu\": 1, \"waves_per_cu\": 1, \"fd_per_cu\": 1,\n            \"ALU_pipe_len\": 1\n        };\n        this.globals.setText(branch_1_s);\n        this.globals.resetGPU();\n    }\n\n    setupBranch_2() {\n        this.globals.dispatchConfig = {\n            \"group_size\": 32, \"groups_count\": 1, \"cycles_per_iter\": 1, \"update graph\": true\n        };\n        this.globals.gpuConfig = {\n            \"DRAM_latency\": 32,\n            \"DRAM_bandwidth\": 12 * 64, \"L1_size\": 1024, \"L1_latency\": 4,\n            \"L2_size\": 1 * 1024, \"L2_latency\": 16, \"sampler_cache_size\": 1 * 1024,\n            \"sampler_latency\": 16, \"VGPRF_per_pe\": 128, \"wave_size\": 32,\n            \"CU_count\": 1, \"ALU_per_cu\": 1, \"waves_per_cu\": 1, \"fd_per_cu\": 1,\n            \"ALU_pipe_len\": 1\n        };\n        this.globals.setText(branch_2_s);\n        this.globals.resetGPU();\n    }\n    setupBranch_3() {\n        this.globals.dispatchConfig = {\n            \"group_size\": 32, \"groups_count\": 1, \"cycles_per_iter\": 1, \"update graph\": true\n        };\n        this.globals.gpuConfig = {\n            \"DRAM_latency\": 32,\n            \"DRAM_bandwidth\": 12 * 64, \"L1_size\": 1024, \"L1_latency\": 4,\n            \"L2_size\": 1 * 1024, \"L2_latency\": 16, \"sampler_cache_size\": 1 * 1024,\n            \"sampler_latency\": 16, \"VGPRF_per_pe\": 128, \"wave_size\": 32,\n            \"CU_count\": 1, \"ALU_per_cu\": 1, \"waves_per_cu\": 1, \"fd_per_cu\": 1,\n            \"ALU_pipe_len\": 1\n        };\n        this.globals.setText(branch_3_s);\n        this.globals.resetGPU();\n    }\n    setupBranch_4() {\n        this.globals.dispatchConfig = {\n            \"group_size\": 32, \"groups_count\": 1, \"cycles_per_iter\": 1, \"update graph\": true\n        };\n        this.globals.gpuConfig = {\n            \"DRAM_latency\": 32,\n            \"DRAM_bandwidth\": 12 * 64, \"L1_size\": 1024, \"L1_latency\": 4,\n            \"L2_size\": 1 * 1024, \"L2_latency\": 16, \"sampler_cache_size\": 1 * 1024,\n            \"sampler_latency\": 16, \"VGPRF_per_pe\": 128, \"wave_size\": 32,\n            \"CU_count\": 1, \"ALU_per_cu\": 1, \"waves_per_cu\": 1, \"fd_per_cu\": 1,\n            \"ALU_pipe_len\": 1\n        };\n        this.globals.setText(branch_4_s);\n        this.globals.resetGPU();\n    }\n    timer() {\n        if (this.globals.wasm && this.globals.run) {\n            for (var i = 0; i < this.globals.dispatchConfig[\"cycles_per_iter\"]; i++) {\n                if (!this.globals.wasm.guppy_clock()) {\n                    this.globals.run = false;\n                } else {\n                    this.globals.clocks += 1;\n                    this.globals.setClocks(this.globals.clocks);\n                    this.globals.active_mask_history.push(this.globals.wasm.guppy_get_active_mask());\n                    this.globals.alu_active_history.push(this.globals.wasm.guppy_get_valu_active());\n                    this.globals.sampler_cache_history.push(this.globals.wasm.guppy_get_sampler_cache_metrics());\n                    this.globals.l2_metric_history.push([\n                        this.globals.wasm.guppy_get_gpu_metric(\"L2 hit\"),\n                        this.globals.wasm.guppy_get_gpu_metric(\"L2 miss\"),\n                        this.globals.wasm.guppy_get_gpu_metric(\"L2 evict\"),\n                    ]);\n                    //if (this.globals.updateCanvas)\n                    this.globals.updateMemory();\n                    if (this.globals.dispatchConfig[\"update graph\"])\n                        this.globals.updateCanvas();\n                }\n            }\n        }\n    }\n    componentDidMount() {\n        this.globals = {};\n        this.globals.dispatchConfig = {\n            \"group_size\": 1, \"groups_count\": 1, \"cycles_per_iter\": 1, \"update graph\": true\n        };\n        this.globals.gpuConfig = {\n            \"DRAM_latency\": 1,\n            \"DRAM_bandwidth\": 1, \"L1_size\": 0, \"L1_latency\": 0,\n            \"L2_size\": 1, \"L2_latency\": 1, \"sampler_cache_size\": 1,\n            \"sampler_latency\": 1, \"VGPRF_per_pe\": 1, \"wave_size\": 1,\n            \"CU_count\": 1, \"ALU_per_cu\": 1, \"waves_per_cu\": 1, \"fd_per_cu\": 1,\n            \"ALU_pipe_len\": 1\n        };\n        this.globals.wasm = null;\n        this.globals.clocks = 0;\n        this.globals.setupBranch_1 = this.setupBranch_1;\n        this.globals.setupBranch_2 = this.setupBranch_2;\n        this.globals.setupBranch_3 = this.setupBranch_3;\n        this.globals.setupBranch_4 = this.setupBranch_4;\n        this.globals.setupBranch_5 = this.setupBranch_5;\n        this.globals.setupBranch_6 = this.setupBranch_6;\n        this.globals.setupRaymarching = this.setupRaymarching;\n        this.globals.r_images = [];\n        this.globals.active_mask_history = null;\n        this.globals.sampler_cache_history = null;\n        this.globals.l2_metric_history = null;\n        this.globals.alu_active_history = null;\n\n        this.intervalId = setInterval(this.timer.bind(this), 1);\n        // Build basic golden-layout config\n        const config = {\n            content: [{\n                type: 'row',\n                content: [\n                    {\n                        type: 'column',\n                        content: [\n                            {\n                                type: 'react-component',\n                                component: 'TextEditor',\n                                title: 'TextEditor',\n                                props: { globals: () => this.globals }\n\n                            },\n                            {\n                                type: 'stack',\n                                content: [\n                                    {\n                                        type: 'react-component',\n                                        component: 'Bindings',\n                                        title: 'Bindings',\n                                        props: { globals: () => this.globals }\n                                    },\n                                    {\n                                        type: 'react-component',\n                                        component: 'Parameters',\n                                        title: 'Parameters',\n                                        props: { globals: () => this.globals }\n                                    }\n                                ]\n                            }\n\n                        ]\n                    }\n                    ,\n                    {\n                        type: 'stack',\n                        content: [\n                            {\n                                type: 'react-component',\n                                component: 'Graphs',\n                                title: 'Graphs',\n                                props: { globals: () => this.globals }\n\n                            },\n                            {\n                                type: 'react-component',\n                                component: 'Readme',\n                                title: 'Readme',\n                                props: { globals: () => this.globals }\n\n                            },\n                        ]\n                    }\n                ]\n            }]\n        };\n\n        var layout = new GoldenLayout(config, this.layout);\n        this.layout = layout;\n        let globals = this.globals;\n        this.globals.resetGPU = function () {\n            globals.run = false;\n            globals.wasm.guppy_create_gpu_state(\n                JSON.stringify(globals.gpuConfig));\n            globals.wasm.guppy_init_framebuffer(256, 256);\n            globals.active_mask_history = [];\n            globals.alu_active_history = [];\n            globals.sampler_cache_history = [];\n            globals.l2_metric_history = [];\n            globals.clocks = 0;\n            if (globals.updateMemory)\n                globals.updateMemory();\n            if (globals.updateParameters)\n                globals.updateParameters();\n            if (globals.updateCanvas)\n                globals.updateCanvas();\n        }\n        _wasm.then(wasm => {\n            layout.updateSize();\n            this.globals.wasm = wasm;\n            this.setupBranch_1();\n\n            //console.log(\"wasm loaded\");\n            //console.log(wasm.guppy_get_config());\n\n        });\n        layout.registerComponent('Graphs', GraphsComponent\n        );\n        layout.registerComponent('TextEditor',\n            TextEditorComponent\n        );\n        layout.registerComponent('Parameters',\n            ParametersComponent\n        );\n        layout.registerComponent('Bindings',\n            BindingsComponent\n        );\n        layout.registerComponent('Readme',\n            ReadmeComponent\n        );\n        layout.init();\n        window.React = React;\n        window.ReactDOM = ReactDOM;\n        window.addEventListener('resize', () => {\n            layout.updateSize();\n        });\n\n\n        //layout.updateSize();\n    }\n\n    render() {\n        return (\n            <div className='goldenLayout'\n                ref={input => this.layout = input} />\n        );\n    }\n}\n\n\nexport default GoldenLayoutWrapper;","export default \"# Toy GPU performace simulator\\n* One\\n* Two\\n  * Three\\n___\\n```console\\n$ kill me\\n```\"","export default \"jmp ENTRY\\n\\n; Distance function\\n; In   : r32.xyz\\n; Uses : r33.xyzw, r32.xyzw\\n; Out  : r32.w\\nDIST_FN:\\n\\n; Sphere_0\\nsub.f32 r33.xyz, r32.xyz, f3(0.0 0.0 5.0)\\nlen r33.w, r33.xyz\\nsub.f32 r33.w, r33.w, f(9.0)\\n\\n; Sphere_1\\nsub.f32 r34.xyz, r32.xyz, f3(0.0 0.0 -5.0)\\nlen r34.w, r34.xyz\\nsub.f32 r34.w, r34.w, f(5.0)\\n\\n; Smooth min\\nsub.f32 r34.x, r33.w, r34.w\\nmul.f32 r34.x, r34.x, f(0.2)\\nmad.f32 r34.x, r34.x, f(0.5), f(0.5)\\nclamp r34.x, r34.x\\n; mul.f32 r34.x, r34.x, r34.x\\nlerp r32.w, r34.w, r33.w, r34.x\\n\\nsub.f32 r34.w, r34.x, f(1.0)\\nmul.f32 r34.w, r34.w, f(5.)\\nmad.f32 r32.w, r34.x, r34.w, r32.w\\n\\n\\npop_mask\\n\\nENTRY:\\n; Figure out where we are in the screen space\\nmov r0.xy, thread_id\\nand r0.x, r0.x, u(255)\\ndiv.u32 r0.y, r0.y, u(256)\\nmov r0.zw, r0.xy\\n\\n; put the red color as an indiacation of ongoing work\\nst u0.xyzw, r0.zw, f4(1.0 0.0 0.0 1.0)\\n\\n; Normalize screen coordiantes\\nutof r0.xy, r0.xy\\n; add 0.5 to fit the center of the texel\\nadd.f32 r0.xy, r0.xy, f2(0.5 0.5)\\n; normalize coordinates\\ndiv.f32 r0.xy, r0.xy, f2(256.0 256.0)\\n; tx * 2.0 - 1.0\\nmul.f32 r0.xy, r0.xy, f2(2.0 -2.0)\\nsub.f32 r0.xy, r0.xy, f2(1.0 -1.0)\\n\\n; Setup a simple pinhole camera\\n; Camera position\\nmov r1.xyz, f3(10.0 10.0 0.0)\\n; Camera look vector\\nmov r2.xyz, f3(-0.7071 -0.7071 0.0)\\n; Camera right vector\\nmov r3.xyz, f3(-0.7071 0.7071 0.0)\\n; Camera up vector\\nmov r4.xyz, f3(0.0 0.0 1.0)\\n; Setup ray direction\\nmov r5.xyz, r2.xyz\\nmad.f32 r5.xyz, r0.xxx, r3.xyz, r5.xyz\\nmad.f32 r5.xyz, r0.yyy, r4.xyz, r5.xyz\\nnorm r5.xyz, r5.xyz\\n\\n; Now solve the scene\\n\\nmov r15.xyz, r5.xyz\\nmul.f32 r15.xyz, r15.xyz, f3(0.01 0.01 0.01)\\nadd.f32 r15.xyz, r15.xyz, r1.xyz\\n\\n;jmp LOOP_END\\n\\npush_mask LOOP_END\\nLOOP_BEGIN:\\n; if (r16.y < 16)\\nlt.u32 r16.x, r16.y, u(16)\\nmask_nz r16.x\\n; Loop body begin\\nmov r32.xyz, r15.xyz\\npush_mask RET\\njmp DIST_FN\\nRET:\\ngt.f32 r14.x, r32.w, f(0.001)\\nsub.u32 r13.x, u(1), r14.x\\nutof r13.x, r13.x\\nmask_nz r14.x\\nmad.f32 r15.xyz, r5.xyz, r32.www, r15.xyz\\n\\n; Loop body end\\n; Increment iteration counter\\nadd.u32 r16.y, r16.y, u(1)\\n\\njmp LOOP_BEGIN\\n\\nLOOP_END:\\n\\nmov r10.w, f(1.0)\\nabs.f32 r10.xyz, r5.www\\n\\npush_mask L1\\nmask_nz r13.x\\nnorm r15.xyz, r15.xyz\\nsample r10.xyzw, t0.xyzw, s0, r15.xy\\npop_mask\\nL1:\\n; mov r5.xyz, r32.www\\n; mov r16.y, u(1)\\n; utof r14.x, r16.y\\n; div.f32 r14.x, r14.x, f(4.0)\\n\\nst u0.xyzw, r0.zw, r10.xyzw\\nret\"","export default \"; Figure out where we are in the screen space\\nmov r0.xy, thread_id\\nand r0.x, r0.x, u(255)\\ndiv.u32 r0.y, r0.y, u(256)\\nmov r0.zw, r0.xy\\n\\n; put the red color as an indiacation of ongoing work\\nst u0.xyzw, r0.zw, f4(1.0 0.0 0.0 1.0)\\n\\n; Normalize screen coordiantes\\nutof r0.xy, r0.xy\\n; add 0.5 to fit the center of the texel\\nadd.f32 r0.xy, r0.xy, f2(0.5 0.5)\\n; normalize coordinates\\ndiv.f32 r0.xy, r0.xy, f2(256.0 256.0)\\n\\nsample r10.xyzw, t0.xyzw, s0, r0.xy\\nsample r11.xyzw, t1.xyzw, s0, r0.xy\\nsample r12.xyzw, t2.xyzw, s0, r0.xy\\n\\nlerp r10.xyzw, r10.xyzw, r11.xyzw, r12.x\\n\\nst u0.xyzw, r0.zw, r10.xyzw\\nret\"","export default \"; Figure out where we are in the screen space\\nmov r0.xy, thread_id\\nand r0.x, r0.x, u(255)\\ndiv.u32 r0.y, r0.y, u(256)\\nmov r0.zw, r0.xy\\n\\n; put the red color as an indiacation of ongoing work\\nst u0.xyzw, r0.zw, f4(1.0 0.0 0.0 1.0)\\n\\n; Normalize screen coordiantes\\nutof r0.xy, r0.xy\\n; add 0.5 to fit the center of the texel\\nadd.f32 r0.xy, r0.xy, f2(0.5 0.5)\\n; normalize coordinates\\ndiv.f32 r0.xy, r0.xy, f2(256.0 256.0)\\n\\nsample r12.xyzw, t4.xyzw, s0, r0.xy\\n\\nmov r32.w, f(1.0)\\n\\npush_mask SKIP_S1\\ngt.f32 r15.x, r12.x, f(0.0)\\nmask_nz r15.x\\nmov r32.y, f(1.0)\\nst u0.xyzw, r0.zw, r32.xyzw\\nsample r10.xyzw, t0.xyzw, s0, r0.xy\\npop_mask\\n\\nSKIP_S1:\\n\\npush_mask SKIP_S2\\nlt.f32 r16.x, r12.x, f(1.0)\\nmask_nz r16.x\\nmov r32.z, f(1.0)\\nst u0.xyzw, r0.zw, r32.xyzw\\nsample r11.xyzw, t1.xyzw, s0, r0.xy\\npop_mask\\n\\nSKIP_S2:\\n\\n\\nlerp r10.xyzw, r10.xyzw, r11.xyzw, r12.xxxx\\n\\nmov r10.x, clock\\nutof r10.x, r10.x\\ndiv.f32 r10.x, r10.x, f(120.0)\\nmov r10.yz, f2(0.0 0.0)\\nst u0.xyzw, r0.zw, r10.xxxw\\nret\"","export default \"; uint lane_id = get_lane_id();\\n    mov r0.x, lane_id\\n; if (lane_id & 1) {\\n    push_mask BRANCH_END\\n    and r0.y, r0.x, u(1)\\n    mask_nz r0.y\\nLOOP_BEGIN:\\n    ; // Do smth\\n     mov r0.x, r0.x\\n     mov r0.x, r0.x\\n     mov r0.x, r0.x\\n     mov r0.x, r0.x\\n     mov r0.x, r0.x\\n     \\n    pop_mask                ; pop mask and reconverge\\nBRANCH_END:\\n    ; // Do some more\\n    ret\"","export default \"; uint lane_id = get_lane_id();\\n    mov r0.x, lane_id\\n; for (uint i = lane_id; i < 16; i++) {\\n    push_mask LOOP_END\\nLOOP_PROLOG:\\n    lt.u32 r0.y, r0.x, u(16)\\n    add.u32 r0.x, r0.x, u(1)\\n    mask_nz r0.y\\nLOOP_BEGIN:\\n    ; // Do smth\\n    jmp LOOP_PROLOG\\nLOOP_END:\\n    ; // }\\n    ret\"","export default \"    mov r0.x, lane_id\\n    lt.u32 r0.y, r0.x, u(16)\\n    ; if (lane_id > 16) {\\n    br_push r0.y, ELSE, CONVERGE\\nTHEN:\\n    ; // Do smth\\n    mov r0.x, r0.x\\n    mov r0.x, r0.x\\n    mov r0.x, r0.x\\n    mov r0.x, r0.x\\n    mov r0.x, r0.x\\n\\n    pop_mask\\n\\n    ; } else {\\nELSE:\\n    ; // Do smth else\\n    mov r0.x, r0.x\\n    mov r0.x, r0.x\\n    mov r0.x, r0.x\\n    mov r0.x, r0.x\\n    mov r0.x, r0.x\\n\\n    pop_mask\\n    ; }\\nCONVERGE:\\n    ret\"","export default \"    mov r4.w, lane_id\\n    utof r4.xyzw, r4.wwww\\n    mov r4.z, wave_id\\n    utof r4.z, r4.z\\n    add.f32 r4.xyzw, r4.xyzw, f4(0.0 0.0 0.0 1.0)\\n    lt.f32 r4.xy, r4.ww, f2(16.0 8.0)\\n    utof r4.xy, r4.xy\\n    br_push r4.x, LB_1, LB_2\\n    mov r0.x, f(666.0)\\n    br_push r4.y, LB_0_1, LB_0_2\\n    mov r0.y, f(666.0)\\n    pop_mask\\nLB_0_1:\\n    mov r0.y, f(777.0)\\n    pop_mask\\nLB_0_2:\\n    pop_mask\\nLB_1:\\n    mov r0.x, f(777.0)\\n\\n    ; push the current wave mask\\n    push_mask LOOP_END\\nLOOP_PROLOG:\\n    lt.f32 r4.x, r4.w, f(32.0)\\n    add.f32 r4.w, r4.w, f(1.0)\\n    ; Setting current lane mask\\n    ; If all lanes are disabled pop_mask is invoked\\n    ; If mask stack is empty then wave is retired\\n    mask_nz r4.x\\nLOOP_BEGIN:\\n    jmp LOOP_PROLOG\\nLOOP_END:\\n    pop_mask\\n    \\n    \\nLB_2:\\n    mov r4.y, lane_id\\n    utof r4.y, r4.y\\n    ret\"","import GoldenLayoutWrapper from './app';\nimport reducer from './reducer';\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <GoldenLayoutWrapper />,\n    document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}