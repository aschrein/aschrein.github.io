{"version":3,"sources":["../../pkg/guppy_rust.js"],"names":["__webpack_require__","r","__webpack_exports__","d","set_panic_hook","__wbg_alert_3b4ae010241eb46f","greet","guppy_create_gpu_state","guppy_get_config","guppy_dispatch","guppy_get_gpu_metric","guppy_clock","guppy_init_framebuffer","guppy_put_image","guppy_get_image","guppy_get_active_mask","guppy_get_valu_active","guppy_get_sampler_cache_metrics","__wbg_error_cc95a3d302735ca3","GPUConfig","__wbindgen_defer_start","__wbindgen_throw","_home_aschrein_dev_webcrapp_guppy_rust_www_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_home_aschrein_dev_webcrapp_guppy_rust_www_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","_guppy_rust_bg__WEBPACK_IMPORTED_MODULE_2__","cachedTextDecoder","TextDecoder","cachegetUint8Memory","getUint8Memory","buffer","Uint8Array","getStringFromWasm","ptr","len","decode","subarray","arg0","arg1","varg0","alert","cachedTextEncoder","TextEncoder","WASM_VECTOR_LEN","passStringToWasm","arg","buf","encode","length","set","ptr0","len0","cachedGlobalArgumentPtr","globalArgumentPtr","cachegetUint32Memory","getUint32Memory","Uint32Array","retptr","mem","rustptr","rustlen","realRet","slice","arg2","cachegetInt32Memory","getArrayI32FromWasm","Int32Array","console","error","Object","this","key","value","freeGPUConfig","Promise","resolve","then","Error"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,mCAAAE,IAAAJ,EAAAG,EAAAD,EAAA,iDAAAG,IAAAL,EAAAG,EAAAD,EAAA,0BAAAI,IAAAN,EAAAG,EAAAD,EAAA,2CAAAK,IAAAP,EAAAG,EAAAD,EAAA,qCAAAM,IAAAR,EAAAG,EAAAD,EAAA,mCAAAO,IAAAT,EAAAG,EAAAD,EAAA,yCAAAQ,IAAAV,EAAAG,EAAAD,EAAA,gCAAAS,IAAAX,EAAAG,EAAAD,EAAA,2CAAAU,IAAAZ,EAAAG,EAAAD,EAAA,oCAAAW,IAAAb,EAAAG,EAAAD,EAAA,oCAAAY,IAAAd,EAAAG,EAAAD,EAAA,0CAAAa,IAAAf,EAAAG,EAAAD,EAAA,0CAAAc,IAAAhB,EAAAG,EAAAD,EAAA,oDAAAe,IAAAjB,EAAAG,EAAAD,EAAA,iDAAAgB,IAAAlB,EAAAG,EAAAD,EAAA,8BAAAiB,IAAAnB,EAAAG,EAAAD,EAAA,2CAAAkB,IAAApB,EAAAG,EAAAD,EAAA,qCAAAmB,IAAA,IAAAC,EAAAtB,EAAA,IAAAuB,EAAAvB,EAAA,IAAAwB,EAAAxB,EAAA,KASO,SAAAI,IACP,OAASoB,EAAA,IAET,IAAAC,EAAA,IAAAC,YAAA,SACAC,EAAA,KAEA,SAAAC,IAKA,OAJA,OAAAD,KAAAE,SAAqEL,EAAA,EAAWK,SAChFF,EAAA,IAAAG,WAAyCN,EAAA,EAAWK,SAGpDF,EAGA,SAAAI,EAAAC,EAAAC,GACA,OAAAR,EAAAS,OAAAN,IAAAO,SAAAH,IAAAC,IAGO,SAAA5B,EAAA+B,EAAAC,GACP,IAAAC,EAAAP,EAAAK,EAAAC,GACAE,MAAAD,GAEA,IAAAE,EAAA,IAAAC,YAAA,SACAC,EAAA,EAEA,SAAAC,EAAAC,GACA,IAAAC,EAAAL,EAAAM,OAAAF,GAEAZ,EAAYR,EAAA,EAAsBqB,EAAAE,QAIlC,OAFAnB,IAAAoB,IAAAH,EAAAb,GACAU,EAAAG,EAAAE,OACAf,EAQO,SAAA1B,EAAA8B,GACP,IAAAa,EAAAN,EAAAP,GACAc,EAAAR,EAEA,IACA,OAAWlB,EAAA,EAAUyB,EAAAC,GAClB,QACC1B,EAAA,EAAoByB,EAAA,EAAAC,IAQjB,SAAA3C,EAAA6B,GACP,IAAAa,EAAAN,EAAAP,GACAc,EAAAR,EACA,OAASlB,EAAA,EAA2ByB,EAAAC,GAEpC,IAAAC,EAAA,KAEA,SAAAC,IAKA,OAJA,OAAAD,IACAA,EAA8B3B,EAAA,KAG9B2B,EAGA,IAAAE,EAAA,KAEA,SAAAC,IAKA,OAJA,OAAAD,KAAAxB,SAAuEL,EAAA,EAAWK,SAClFwB,EAAA,IAAAE,YAA2C/B,EAAA,EAAWK,SAGtDwB,EAOO,SAAA7C,IACP,IAAAgD,EAAAJ,IACE5B,EAAA,EAAqBgC,GACvB,IAAAC,EAAAH,IACAI,EAAAD,EAAAD,EAAA,GACAG,EAAAF,EAAAD,EAAA,KACAI,EAAA7B,EAAA2B,EAAAC,GAAAE,QAIA,OAFErC,EAAA,EAAoBkC,EAAA,EAAAC,GAEtBC,EASO,SAAAnD,EAAA2B,EAAAC,EAAAyB,GACP,IAAAb,EAAAN,EAAAP,GACAc,EAAAR,EAEA,IACA,OAAWlB,EAAA,EAAmByB,EAAAC,EAAAb,EAAAyB,GAC3B,QACCtC,EAAA,EAAoByB,EAAA,EAAAC,IAQjB,SAAAxC,EAAA0B,GACP,IAAAa,EAAAN,EAAAP,GACAc,EAAAR,EACA,OAASlB,EAAA,EAAyByB,EAAAC,GAM3B,SAAAvC,IACP,OAAyB,IAAhBa,EAAA,IAQF,SAAAZ,EAAAwB,EAAAC,GACP,OAASb,EAAA,EAA2BY,EAAAC,GAO7B,SAAAxB,EAAAuB,GACP,IAAAa,EAAAN,EAAAP,GACAc,EAAAR,EACA,OAASlB,EAAA,EAAoByB,EAAAC,GAQtB,SAAApC,EAAAsB,EAAAC,GACP,IAAAmB,EAAAJ,IACE5B,EAAA,EAAoBgC,EAAApB,EAAAC,GACtB,IAAAoB,EAAAH,IACAI,EAAAD,EAAAD,EAAA,GACAG,EAAAF,EAAAD,EAAA,KACAI,EAAA7B,EAAA2B,EAAAC,GAAAE,QAIA,OAFErC,EAAA,EAAoBkC,EAAA,EAAAC,GAEtBC,EAWO,SAAA7C,IACP,IAAAyC,EAAAJ,IACE5B,EAAA,EAA0BgC,GAC5B,IAXAxB,EAAAC,EAWAwB,EAAAH,IACAI,EAAAD,EAAAD,EAAA,GACAG,EAAAF,EAAAD,EAAA,KACAI,GAdA5B,EAcA0B,EAdAzB,EAcA0B,EAbA/B,IAAAO,SAAAH,EAAA,EAAAA,EAAA,EAAAC,IAaA4B,QAIA,OAFErC,EAAA,EAAoBkC,EAAA,EAAAC,GAEtBC,EAEA,IAAAG,EAAA,KAUA,SAAAC,EAAAhC,EAAAC,GACA,OARA,OAAA8B,KAAAlC,SAAqEL,EAAA,EAAWK,SAChFkC,EAAA,IAAAE,WAAyCzC,EAAA,EAAWK,SAGpDkC,GAIA5B,SAAAH,EAAA,EAAAA,EAAA,EAAAC,GAOO,SAAAjB,IACP,IAAAwC,EAAAJ,IACE5B,EAAA,EAA0BgC,GAC5B,IAAAC,EAAAH,IACAI,EAAAD,EAAAD,EAAA,GACAG,EAAAF,EAAAD,EAAA,KACAI,EAAAI,EAAAN,EAAAC,GAAAE,QAIA,OAFErC,EAAA,EAAoBkC,EAAA,EAAAC,GAEtBC,EAWO,SAAA3C,IACP,IAAAuC,EAAAJ,IACE5B,EAAA,EAAoCgC,GACtC,IAXAxB,EAAAC,EAWAwB,EAAAH,IACAI,EAAAD,EAAAD,EAAA,GACAG,EAAAF,EAAAD,EAAA,KACAI,GAdA5B,EAcA0B,EAdAzB,EAcA0B,EAbAL,IAAAnB,SAAAH,EAAA,EAAAA,EAAA,EAAAC,IAaA4B,QAIA,OAFErC,EAAA,EAAoBkC,EAAA,EAAAC,GAEtBC,EAEO,SAAA1C,EAAAkB,EAAAC,GACP,IAAAC,EAAAP,EAAAK,EAAAC,GACAC,IAAAuB,QAEErC,EAAA,EAAoBY,EAAA,EAAAC,GAEtB6B,QAAAC,MAAA7B,GAUO,IAAAnB,EAEP,WACA,SAAAA,IACIiD,OAAA9C,EAAA,EAAA8C,CAAeC,KAAAlD,GAYnB,OATEiD,OAAA7C,EAAA,EAAA6C,CAAYjD,EAAA,EACdmD,IAAA,OACAC,MAAA,WACA,IAAAvC,EAAAqC,KAAArC,IACAqC,KAAArC,IAAA,EAlBA,SAAAA,GACER,EAAA,EAAyBQ,GAkB3BwC,CAAAxC,OAIAb,EAdA,GAgBO,SAAAC,IACPqD,QAAAC,UAAAC,KAAA,WACA,OAAWnD,EAAA,MAGJ,SAAAH,EAAAW,EAAAC,GACP,UAAA2C,MAAA7C,EAAAC,EAAAC","file":"static/js/3.39a49b0f.chunk.js","sourcesContent":["import _classCallCheck from \"/home/aschrein/dev/webcrapp/guppy_rust/www/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/aschrein/dev/webcrapp/guppy_rust/www/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/* tslint:disable */\nimport * as wasm from './guppy_rust_bg';\n/**\n* @returns {void}\n*/\n\nexport function set_panic_hook() {\n  return wasm.set_panic_hook();\n}\nvar cachedTextDecoder = new TextDecoder('utf-8');\nvar cachegetUint8Memory = null;\n\nfunction getUint8Memory() {\n  if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n    cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint8Memory;\n}\n\nfunction getStringFromWasm(ptr, len) {\n  return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nexport function __wbg_alert_3b4ae010241eb46f(arg0, arg1) {\n  var varg0 = getStringFromWasm(arg0, arg1);\n  alert(varg0);\n}\nvar cachedTextEncoder = new TextEncoder('utf-8');\nvar WASM_VECTOR_LEN = 0;\n\nfunction passStringToWasm(arg) {\n  var buf = cachedTextEncoder.encode(arg);\n\n  var ptr = wasm.__wbindgen_malloc(buf.length);\n\n  getUint8Memory().set(buf, ptr);\n  WASM_VECTOR_LEN = buf.length;\n  return ptr;\n}\n/**\n* @param {string} arg0\n* @returns {void}\n*/\n\n\nexport function greet(arg0) {\n  var ptr0 = passStringToWasm(arg0);\n  var len0 = WASM_VECTOR_LEN;\n\n  try {\n    return wasm.greet(ptr0, len0);\n  } finally {\n    wasm.__wbindgen_free(ptr0, len0 * 1);\n  }\n}\n/**\n* @param {string} arg0\n* @returns {void}\n*/\n\nexport function guppy_create_gpu_state(arg0) {\n  var ptr0 = passStringToWasm(arg0);\n  var len0 = WASM_VECTOR_LEN;\n  return wasm.guppy_create_gpu_state(ptr0, len0);\n}\nvar cachedGlobalArgumentPtr = null;\n\nfunction globalArgumentPtr() {\n  if (cachedGlobalArgumentPtr === null) {\n    cachedGlobalArgumentPtr = wasm.__wbindgen_global_argument_ptr();\n  }\n\n  return cachedGlobalArgumentPtr;\n}\n\nvar cachegetUint32Memory = null;\n\nfunction getUint32Memory() {\n  if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== wasm.memory.buffer) {\n    cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint32Memory;\n}\n/**\n* @returns {string}\n*/\n\n\nexport function guppy_get_config() {\n  var retptr = globalArgumentPtr();\n  wasm.guppy_get_config(retptr);\n  var mem = getUint32Memory();\n  var rustptr = mem[retptr / 4];\n  var rustlen = mem[retptr / 4 + 1];\n  var realRet = getStringFromWasm(rustptr, rustlen).slice();\n\n  wasm.__wbindgen_free(rustptr, rustlen * 1);\n\n  return realRet;\n}\n/**\n* @param {string} arg0\n* @param {number} arg1\n* @param {number} arg2\n* @returns {void}\n*/\n\nexport function guppy_dispatch(arg0, arg1, arg2) {\n  var ptr0 = passStringToWasm(arg0);\n  var len0 = WASM_VECTOR_LEN;\n\n  try {\n    return wasm.guppy_dispatch(ptr0, len0, arg1, arg2);\n  } finally {\n    wasm.__wbindgen_free(ptr0, len0 * 1);\n  }\n}\n/**\n* @param {string} arg0\n* @returns {number}\n*/\n\nexport function guppy_get_gpu_metric(arg0) {\n  var ptr0 = passStringToWasm(arg0);\n  var len0 = WASM_VECTOR_LEN;\n  return wasm.guppy_get_gpu_metric(ptr0, len0);\n}\n/**\n* @returns {boolean}\n*/\n\nexport function guppy_clock() {\n  return wasm.guppy_clock() !== 0;\n}\n/**\n* @param {number} arg0\n* @param {number} arg1\n* @returns {number}\n*/\n\nexport function guppy_init_framebuffer(arg0, arg1) {\n  return wasm.guppy_init_framebuffer(arg0, arg1);\n}\n/**\n* @param {string} arg0\n* @returns {number}\n*/\n\nexport function guppy_put_image(arg0) {\n  var ptr0 = passStringToWasm(arg0);\n  var len0 = WASM_VECTOR_LEN;\n  return wasm.guppy_put_image(ptr0, len0);\n}\n/**\n* @param {number} arg0\n* @param {boolean} arg1\n* @returns {string}\n*/\n\nexport function guppy_get_image(arg0, arg1) {\n  var retptr = globalArgumentPtr();\n  wasm.guppy_get_image(retptr, arg0, arg1);\n  var mem = getUint32Memory();\n  var rustptr = mem[retptr / 4];\n  var rustlen = mem[retptr / 4 + 1];\n  var realRet = getStringFromWasm(rustptr, rustlen).slice();\n\n  wasm.__wbindgen_free(rustptr, rustlen * 1);\n\n  return realRet;\n}\n\nfunction getArrayU8FromWasm(ptr, len) {\n  return getUint8Memory().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @returns {Uint8Array}\n*/\n\n\nexport function guppy_get_active_mask() {\n  var retptr = globalArgumentPtr();\n  wasm.guppy_get_active_mask(retptr);\n  var mem = getUint32Memory();\n  var rustptr = mem[retptr / 4];\n  var rustlen = mem[retptr / 4 + 1];\n  var realRet = getArrayU8FromWasm(rustptr, rustlen).slice();\n\n  wasm.__wbindgen_free(rustptr, rustlen * 1);\n\n  return realRet;\n}\nvar cachegetInt32Memory = null;\n\nfunction getInt32Memory() {\n  if (cachegetInt32Memory === null || cachegetInt32Memory.buffer !== wasm.memory.buffer) {\n    cachegetInt32Memory = new Int32Array(wasm.memory.buffer);\n  }\n\n  return cachegetInt32Memory;\n}\n\nfunction getArrayI32FromWasm(ptr, len) {\n  return getInt32Memory().subarray(ptr / 4, ptr / 4 + len);\n}\n/**\n* @returns {Int32Array}\n*/\n\n\nexport function guppy_get_valu_active() {\n  var retptr = globalArgumentPtr();\n  wasm.guppy_get_valu_active(retptr);\n  var mem = getUint32Memory();\n  var rustptr = mem[retptr / 4];\n  var rustlen = mem[retptr / 4 + 1];\n  var realRet = getArrayI32FromWasm(rustptr, rustlen).slice();\n\n  wasm.__wbindgen_free(rustptr, rustlen * 4);\n\n  return realRet;\n}\n\nfunction getArrayU32FromWasm(ptr, len) {\n  return getUint32Memory().subarray(ptr / 4, ptr / 4 + len);\n}\n/**\n* @returns {Uint32Array}\n*/\n\n\nexport function guppy_get_sampler_cache_metrics() {\n  var retptr = globalArgumentPtr();\n  wasm.guppy_get_sampler_cache_metrics(retptr);\n  var mem = getUint32Memory();\n  var rustptr = mem[retptr / 4];\n  var rustlen = mem[retptr / 4 + 1];\n  var realRet = getArrayU32FromWasm(rustptr, rustlen).slice();\n\n  wasm.__wbindgen_free(rustptr, rustlen * 4);\n\n  return realRet;\n}\nexport function __wbg_error_cc95a3d302735ca3(arg0, arg1) {\n  var varg0 = getStringFromWasm(arg0, arg1);\n  varg0 = varg0.slice();\n\n  wasm.__wbindgen_free(arg0, arg1 * 1);\n\n  console.error(varg0);\n}\n\nfunction freeGPUConfig(ptr) {\n  wasm.__wbg_gpuconfig_free(ptr);\n}\n/**\n*/\n\n\nexport var GPUConfig =\n/*#__PURE__*/\nfunction () {\n  function GPUConfig() {\n    _classCallCheck(this, GPUConfig);\n  }\n\n  _createClass(GPUConfig, [{\n    key: \"free\",\n    value: function free() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      freeGPUConfig(ptr);\n    }\n  }]);\n\n  return GPUConfig;\n}();\nexport function __wbindgen_defer_start() {\n  Promise.resolve().then(function () {\n    return wasm.__wbindgen_start();\n  });\n}\nexport function __wbindgen_throw(ptr, len) {\n  throw new Error(getStringFromWasm(ptr, len));\n}"],"sourceRoot":""}